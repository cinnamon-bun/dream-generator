"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const titlecase_1 = __importDefault(require("titlecase"));
// some of this was adapted from or inspired by Tracery's modifiers
// https://github.com/galaxykate/tracery/blob/master/js/tracery/modifiers.js
let repeatModUntilNoChange = (input, fn) => {
    let prev = null;
    while (prev !== input) {
        prev = input;
        input = fn(input);
    }
    return input;
};
let isVowel = (char) => {
    char = char.toLowerCase();
    return char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u';
};
let endsWithAny = (input, suffixes) => {
    // does the string end with any of the suffixes?
    for (let suf of suffixes) {
        if (input.endsWith(suf)) {
            return true;
        }
    }
    return false;
};
let endsWithConY = (input) => {
    // does the string end with a consonant and then a y?
    if (input.length < 2) {
        return false;
    }
    return (input[input.length - 1] === 'y' && !isVowel(input[input.length - 2]));
};
let pluralize = (input) => {
    // convert a word to its plural form
    // TODO: match case of the original?
    if (input === '') {
        return input;
    }
    let i = input.toLowerCase();
    if (endsWithAny(i, ['s', 'sh', 'ch', 'x', 'z', 'o'])) {
        return input + 'es';
    }
    if (endsWithConY(i)) {
        return input.slice(0, input.length - 1) + 'ies';
    }
    return input + 's';
};
exports.makeModifiers = () => ({
    s: pluralize,
    a: (input) => {
        if (input === '') {
            return input;
        }
        if (isVowel(input[0])) {
            return 'an ' + input;
        }
        return 'a ' + input;
    },
    trim: (input) => input.trim(),
    trimleft: (input) => input.trimLeft(),
    trimright: (input) => input.trimRight(),
    mergespaces: (input) => {
        // replace consecutive spaces with one space
        return repeatModUntilNoChange(input, (input) => {
            return input.split('  ').join(' ');
        });
    },
    uppercase: (input) => input.toUpperCase(),
    lowercase: (input) => input.toLowerCase(),
    titlecase: (input) => titlecase_1.default(input),
    sentencecase: (input) => {
        // capitalize first character only
        if (input === '') {
            return input;
        }
        return input[0].toUpperCase() + input.slice(1);
    },
    inception: (input) => input.toUpperCase().split('').join(' '),
    wackycase: (input) => {
        // "hello" -> "hElLo"
        let result = [];
        for (let ii = 0; ii < input.length; ii++) {
            if (ii % 2 === 0) {
                result.push(input[ii].toLowerCase());
            }
            else {
                result.push(input[ii].toUpperCase());
            }
        }
        return result.join('');
    },
});
